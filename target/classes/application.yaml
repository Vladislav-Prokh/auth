server:
  port: 9000

spring:
  application:
    name: app
  datasource:
    url: jdbc:postgresql://localhost:5432/auth_db
    username: postgres
    password: 123456
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create

  security:
    oauth2:
      client:
        registration:
          google:
            client-id:
            client-secret:
            scope: openid,profile,email
            redirect-uri: http://localhost:9000/login/oauth2/code/google
            authorization-grant-type: authorization_code
            javascript-origins:
              - http://localhost:9000
              - http://localhost:4200
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

  authorizationserver:
    client:
      articles-client:
        registration:
          client-id: articles-client
          client-secret: "{noop}secret"
          client-name: Articles Client
          client-authentication-methods:
            - client_secret_basic
          authorization-grant-types:
            - authorization_code
            - refresh_token
          redirect-uris:
            - http://localhost:9000/login/oauth2/code/my_auth
            - http://localhost:9000/authorized
          scopes:
            - openid
            - articles.read

logging:
  level:
    org.springframework.security: trace

resourceserver:
  jwt:
    issuer-uri: http://localhost:9000
